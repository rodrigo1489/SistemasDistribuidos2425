using Microsoft.EntityFrameworkCore;
using Servidor20.Data;
using Servidor20.Models;
using Grpc.Net.ClientFactory;
using Analyze;      // generated by analyze.proto
using Preprocess;   // generated by preprocess.proto

var builder = WebApplication.CreateBuilder(args);

// 1) EF Core DbContext
builder.Services.AddDbContext<MonitoracaoContext>(opts =>
    opts.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"))
);

// 2) gRPC client for analysis
builder.Services.AddGrpcClient<AnalysisService.AnalysisServiceClient>(o =>
{
    o.Address = new Uri("http://localhost:5002");
});

// 3) serve static files from wwwroot
builder.Services.AddDirectoryBrowser();
var app = builder.Build();
app.UseDefaultFiles();
app.UseStaticFiles();

// 4) REST endpoints
app.MapGet("/registos", async (MonitoracaoContext db) =>
    await db.Registos
            .Where(r => r.TipoMensagem == "DADOS")
            .OrderByDescending(r => r.Timestamp)
            .Take(100)
            .Select(r => new {
                timestamp = r.Timestamp,
                wavyId = r.WavyId,
                tipoDado = r.TipoDado,
                valor = r.Valor
            })
            .ToListAsync()
);

app.MapGet("/analises", async (MonitoracaoContext db, string sensor, DateTime di, DateTime df) =>
    await db.Registos
            .Where(r => r.TipoMensagem == "ANALISE")
            .OrderBy(r => r.Timestamp)
            .Select(r => new {
                timestamp = r.Timestamp,
                tipoDado = r.TipoDado,
                media = r.Media,
                desvioPadrao = r.DesvioPadrao
            })
            .ToListAsync()
);

// 5) Manual‐analysis: call gRPC and persist result
app.MapPost("/analise/manual", async (
    MonitoracaoContext db,
    AnalysisService.AnalysisServiceClient client,
    string sensor,
    DateTime di,
    DateTime df) =>
{
    // 5.1) load raw samples
    var samples = await db.Registos
        .Where(r => r.TipoMensagem == "DADOS"
                 && r.TipoDado == sensor
                 && r.Timestamp >= di
                 && r.Timestamp <= df)
        .Select(r => new Preprocess.ProcessedSample
        {
            Origem = r.WavyId ?? "",
            Tipo = r.TipoDado!,
            Valor = r.Valor!.Value,
            Timestamp = r.Timestamp.ToString("o")
        })
        .ToListAsync();

    // 5.2) invoke analysis service
    var req = new AnalyzeRequest();
    req.Samples.AddRange(samples);
    var res = await client.AnalyzeAsync(req);

    // 5.3) persist analysis into Registos table
    var analis = new Registo
    {
        TipoMensagem = "ANALISE",
        AgregadorId = "UI_TRIGGER",      // mark origin
        WavyId = null,
        TipoDado = sensor,
        Valor = null,
        Volume = samples.Count,
        Metodo = "rpc_manual",
        Timestamp = DateTime.UtcNow,
        Origem = "UI",
        Destino = "ANALYSIS_SERVICE",
        Media = res.Media,
        DesvioPadrao = res.Desviopadrao
    };
    db.Registos.Add(analis);
    await db.SaveChangesAsync();

    return Results.Ok(new
    {
        media = res.Media,
        desvioPadrao = res.Desviopadrao
    });
});

app.MapFallbackToFile("index.html");

app.Run("http://localhost:5003");
